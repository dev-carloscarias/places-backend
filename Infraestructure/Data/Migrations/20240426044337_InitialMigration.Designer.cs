// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Places.Infrastructure.Data;

#nullable disable

namespace Places.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240426044337_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Places.Domain.Entities.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7010), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "África",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7038), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7041), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "América",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7042), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7043), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Asia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7044), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7045), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Europa",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7046), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7047), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Oceanía",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 584, DateTimeKind.Unspecified).AddTicks(7047), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Places.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContinentId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Places.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasMaxLength(18)
                        .HasPrecision(2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Places.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Places.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(743), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Super Administrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(753), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(755), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Regular User",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(756), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(757), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Administrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(758), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Places.Domain.Entities.Translate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Tranlation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId", "LanguageCode" }, "IX_Translate_Comment_Language");

                    b.HasIndex(new[] { "CurrencyId", "LanguageCode" }, "IX_Translate_Currency_Language");

                    b.HasIndex(new[] { "LanguageId", "LanguageCode" }, "IX_Translate_Language_Language");

                    b.HasIndex(new[] { "MessageId", "LanguageCode" }, "IX_Translate_Message_Language");

                    b.ToTable("Translates");
                });

            modelBuilder.Entity("Places.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasProperties")
                        .HasColumnType("bit");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Places.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7393), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Email",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7401), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7403), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Facebook",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7404), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7406), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Google",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7406), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7407), new TimeSpan(0, -6, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Apple",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 4, 25, 22, 43, 37, 586, DateTimeKind.Unspecified).AddTicks(7408), new TimeSpan(0, -6, 0, 0, 0)),
                            UpdatedBy = 0
                        });
                });

            modelBuilder.Entity("Places.Domain.Entities.Country", b =>
                {
                    b.HasOne("Places.Domain.Entities.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Places.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Places.Domain.Entities.User", b =>
                {
                    b.HasOne("Places.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Places.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Places.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Role");

                    b.Navigation("UserType");
                });
#pragma warning restore 612, 618
        }
    }
}
